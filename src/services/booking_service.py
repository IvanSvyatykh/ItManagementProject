import json
from datetime import datetime, time

from aiogoogle import Aiogoogle
from aiogoogle.auth.creds import ServiceAccountCreds
import pytz
import random

from config import SERVICE_ACCOUNT_FILE, SCOPES, CALENDAR_ID

LOCATION_MAP = {
    # –ë–ª–∞-–ë–ª–∞
    "–±–ª–∞–±–ª–∞": "–ë–ª–∞-–ë–ª–∞",
    "–±–ª–∞–±–ª–∞–∫–æ–º–Ω–∞—Ç–∞": "–ë–ª–∞-–ë–ª–∞",
    # –¢–µ—Ç-–∞-—Ç–µ—Ç
    "—Ç–µ—Ç–∞—Ç–µ—Ç": "–¢–µ—Ç-–∞-—Ç–µ—Ç",
    "—Ç–µ—Ç–∞—Ç–µ—Ç–æ—à–Ω–∞—è": "–¢–µ—Ç-–∞-—Ç–µ—Ç",
    # –¢–µ—Ä–æ—á–Ω–∞—è
    "—Ç–µ—Ä–æ—á–Ω–∞—è": "–¢–µ—Ä–æ—á–Ω–∞—è",
    "—Ç—ë—Ä–æ—á–Ω–∞—è": "–¢–µ—Ä–æ—á–Ω–∞—è",
    # –ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7–æ–π": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7—ç—Ç": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7–æ–π—ç—Ç": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7—ç—Ç–∞–∂": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞7–æ–π—ç—Ç–∞–∂": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "7–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "7—ç—Ç–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "7–æ–π—ç—Ç–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "7—ç—Ç–∞–∂–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    "7–æ–π—ç—Ç–∞–∂–∑–æ–Ω–∞–æ—Ç–¥—ã—Ö–∞": "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ 7 —ç—Ç–∞–∂",
    # 7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞
    "7–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—É–ø—Ä–æ–µ–∫—Ç–æ—Ä–∞": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—ç—Ç—É–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—ç—Ç–∞–∂—É–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—É–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—ç—Ç–∞–∂—É–ø—Ä–æ–µ–∫—Ç–æ—Ä–∞": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7–æ–π—ç—Ç–∞–∂—É–ø—Ä–æ–µ–∫—Ç–æ—Ä–∞": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—ç—Ç—É–ø—Ä–æ–µ–∫—Ç–æ—Ä–∞": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7–æ–π—ç—Ç—É–ø—Ä–æ–µ–∫—Ç–æ—Ä–∞": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7—ç—Ç–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    "7–æ–π—ç—Ç–ø—Ä–æ–µ–∫—Ç–æ—Ä": "7 —ç—Ç–∞–∂ —É –ø—Ä–æ–µ–∫—Ç–æ—Ä–∞",
    # –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è
    "—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
    "—Å–ø–æ—Ä—Ç–∫–æ–º–Ω–∞—Ç–∞": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
    "—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è–∫–æ–º–Ω–∞—Ç–∞": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
    # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞
    "–±–µ–∑—É–∫–∞–∑–∞–Ω–∏—è–º–µ—Å—Ç–∞": "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞",
}

MESSAGE_LIMIT = 1000
TIMEZONE = pytz.timezone("Asia/Yekaterinburg")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
with open(SERVICE_ACCOUNT_FILE, "r") as f:
    service_account_info = json.load(f)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ServiceAccountCreds
CREDS = ServiceAccountCreds(
    type=service_account_info.get("type"),
    project_id=service_account_info.get("project_id"),
    private_key_id=service_account_info.get("private_key_id"),
    private_key=service_account_info.get("private_key").replace(
        "\\n", "\n"
    ),
    client_email=service_account_info.get("client_email"),
    client_id=service_account_info.get("client_id"),
    auth_uri=service_account_info.get("auth_uri"),
    token_uri=service_account_info.get("token_uri"),
    auth_provider_x509_cert_url=service_account_info.get(
        "auth_provider_x509_cert_url"
    ),
    client_x509_cert_url=service_account_info.get("client_x509_cert_url"),
    scopes=SCOPES,
    subject=None,
)


async def get_random_people_count() -> int:
    return random.randint(0, 4)


async def get_booking_status(
    room_name: str, current_time: datetime
) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.
    """
    people_count = await get_random_people_count()
    status = "üü¢" if people_count == 0 else "üî¥"
    next_events = await get_next_event(room_name)

    return {
        "status": status,
        "people_count": people_count,
        "next_booking_time": next_events,
    }


def split_message_into_pages(
    text: str, limit: int = MESSAGE_LIMIT
) -> list[str]:
    lines = text.split("\n")
    pages, current_page = [], []

    for line in lines:
        if sum(len(l) + 1 for l in current_page) + len(line) + 1 <= limit:
            current_page.append(line)
        else:
            pages.append("\n".join(current_page))
            current_page = [line]

    if current_page:
        pages.append("\n".join(current_page))

    return pages


async def normalize_location(location: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ–∫–∞—Ü–∏–∏.
    """
    location = "".join(
        filter(str.isalnum, location.lower().replace(" ", ""))
    )

    return LOCATION_MAP.get(location, location)


async def format_event(event: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    """
    start = datetime.fromisoformat(event["start"]["dateTime"]).astimezone(
        TIMEZONE
    )
    end = datetime.fromisoformat(event["end"]["dateTime"]).astimezone(
        TIMEZONE
    )
    location = await normalize_location(
        event.get("location", "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞")
    )
    return f"{location} - {start.strftime('%Y-%m-%d %H:%M')} - {end.strftime('%H:%M')}"


async def get_events(
    start_date: datetime, end_date: datetime
) -> list[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    async with Aiogoogle(service_account_creds=CREDS) as aiogoogle:
        calendar = await aiogoogle.discover("calendar", "v3")
        time_min = start_date.astimezone(TIMEZONE).isoformat()
        time_max = end_date.astimezone(TIMEZONE).isoformat()

        response = await aiogoogle.as_service_account(
            calendar.events.list(
                calendarId=CALENDAR_ID,
                timeMin=time_min,
                timeMax=time_max,
                singleEvents=True,
                orderBy="startTime",
            )
        )
        return response.get("items", [])


async def get_next_event(location: str) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.
    """
    now = datetime.now(TIMEZONE)
    start_of_day = datetime.combine(now.date(), time.min, tzinfo=TIMEZONE)
    end_of_day = datetime.combine(now.date(), time.max, tzinfo=TIMEZONE)

    events_today = await get_events(start_of_day, end_of_day)
    matched_events = []

    for event in events_today:
        if location.lower() in (
            await normalize_location(event.get("location", "")).lower()
        ):
            start_time = (
                datetime.fromisoformat(event["start"]["dateTime"])
                .astimezone(TIMEZONE)
                .strftime("%H:%M")
            )
            end_time = (
                datetime.fromisoformat(event["end"]["dateTime"])
                .astimezone(TIMEZONE)
                .strftime("%H:%M")
            )

            matched_events.append(
                {
                    "location": location,
                    "start_time": start_time,
                    "end_time": end_time,
                }
            )

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    matched_events.sort(key=lambda x: x["start_time"])
    return matched_events
